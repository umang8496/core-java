==========================
Structural_Design_Patterns
==========================

Structural patterns explain how to assemble objects and classes into larger structures while keeping these structures flexible and efficient.

Adapter: Adapter is a structural design pattern that allows objects with incompatible interfaces to collaborate.
Bridge: This is a design mechanism that encapsulates an implementation class inside of an interface class.
Composite: Using the Composite pattern makes sense only when the core model of the app can be represented as a tree.
Decorator:It lets us attach new behaviors to objects by placing these objects inside special wrapper objects that contain the behaviors.
Facade: It provides a simplified interface to a library, a framework, or any other complex set of classes.
Flyweight: The Flyweight pattern has a single purpose: minimizing memory intake.
Proxy: It provides a substitute or placeholder for another object.


======================
ADAPTER DESIGN PATTERN
======================
Adapter pattern works as a bridge between two incompatible interfaces.
This type of design pattern combines the capability of two independent interfaces.

It allows two unrelated/uncommon interfaces to work together.
In other words, the adapter pattern makes two incompatible interfaces compatible without changing their existing code.
Interfaces may be incompatible, but the inner functionality should match the requirement.

Adapter patterns use a single class (the adapter class) to join functionalities of independent or incompatible interfaces/classes.

This pattern involves a single class which is responsible to join functionalities of independent or incompatible interfaces.
A real life example could be a case of card reader which acts as an adapter between memory card and a laptop.
You plugin the memory card into card reader and card reader into the laptop so that memory card can be read via laptop.

Imagine that you’re creating a stock market monitoring app.
The app downloads the stock data from multiple sources in XML format and then displays nice-looking charts and diagrams for the user.

At some point, you decide to improve the app by integrating a smart 3rd-party analytics library.
But there’s a catch: the analytics library only works with data in JSON format.
You could change the library to work with XML.
However, this might break some existing code that relies on the library.
And worse, you might not have access to the library’s source code in the first place, making this approach impossible.

You can create an adapter.
This is a special object that converts the interface of one object so that another object can understand it.
This pattern involves a single class which is responsible to join functionalities of independent or incompatible interfaces.

An adapter wraps one of the objects to hide the complexity of conversion happening behind the scenes.
The wrapped object isn’t even aware of the adapter.
For example, an object that operates in m/kms with can be wrapped to an adapter that converts all of the data to imperial units such as feet and miles.

Adapters can not only convert data into various formats but can also help objects with different interfaces collaborate.
Here’s how it works:
-->	The adapter gets an interface, compatible with one of the existing objects.
-->	Using this interface, the existing object can safely call the adapter’s methods.
-->	Upon receiving a call, the adapter passes the request to the second object,
	but in a format and order that the second object expects.

Sometimes it’s even possible to create a two-way adapter that can convert the calls in both directions.
There are two versions of adapaters avialble: Object and Class.

Implementation Details
----------------------
Object Adapter implementation uses the object composition principle: the adapter implements the interface of one object and wraps the other one.
It can be implemented in all popular programming languages.

Class Adapter implementation uses inheritance: the adapter inherits interfaces from both objects at the same time.
Note that this approach can only be implemented in programming languages that support multiple inheritance, such as C++.

01. The Client is a class that contains the existing business logic of the program.
02. The Client Interface describes a protocol that other classes must follow to be able to collaborate with the client code.
03. The Service is some useful class (usually 3rd-party or legacy).
	The client can’t use this class directly because it has an incompatible interface.
04. The Adapter is a class that’s able to work with both the client and the service: 
	it implements the client interface, while wrapping the service object.
	The adapter receives calls from the client via the adapter interface and translates them into calls to the wrapped service object in a format it can understand. 
05. The client code doesn’t get coupled to the concrete adapter class as long as it works with the adapter via the client interface.
	Thanks to this, we can introduce new types of adapters into the program without breaking the existing client code.
	This can be useful when the interface of the service class gets changed or replaced: 
	we can just create a new adapter class without changing the client code.

How to implement ?
------------------
01.	Make sure that we have at least two classes with incompatible interfaces:
	A useful service class, which we can’t change (often 3rd-party, legacy or with lots of existing dependencies).
	One or several client classes that would benefit from using the service class.
02.	Declare the client interface and describe how clients communicate with the service.
03. Create the adapter class and make it follow the client interface. Leave all the methods empty for now.
04.	Add a field to the adapter class to store a reference to the service object.
	The common practice is to initialize this field via the constructor, but sometimes it’s more convenient to pass it to the adapter when calling its methods.
05. One by one, implement all methods of the client interface in the adapter class.
	The adapter should delegate most of the real work to the service object, handling only the interface or data format conversion.
06.	Clients should use the adapter via the client interface.
	This will let us change or extend the adapters without affecting the client code.
	
Applicability
-------------
Use the Adapter class when we want to use some existing class, but its interface isn’t compatible with the rest of the code.
Use the pattern when we want to reuse several existing subclasses that lack some common functionality that can’t be added to the superclass.


=====================
BRIDGE DESIGN PATTERN
=====================
The Bridge design pattern allows us to separate the abstraction from the implementation.
This is a design mechanism that encapsulates an implementation class inside of an interface class.

The bridge pattern allows the Abstraction and the Implementation to be developed independently and the client code can access only the Abstraction part without being concerned about the Implementation part.
The abstraction is an interface or abstract class and the implementor is also an interface or abstract class.
The abstraction contains a reference to the implementor.
Children of the abstraction are referred to as refined abstractions, and children of the implementor are concrete implementors.
Since we can change the reference to the implementor in the abstraction, we are able to change the abstraction’s implementor at run-time.
Changes to the implementor do not affect client code.
It increases the loose coupling between class abstraction and it’s implementation.

Bridge is used when we need to decouple an abstraction from its implementation so that the two can vary independently.

Say we have a geometric Shape class with a pair of subclasses: Circle and Square.
We want to extend this class hierarchy to incorporate colors, so we plan to create Red and Blue shape subclasses.
However, since we already have two subclasses, we’ll need to create four class combinations such as BlueCircle and RedSquare.
Adding new shape types and colors to the hierarchy will grow it exponentially.
For example, to add a triangle shape we’d need to introduce two subclasses, one for each color.
And after that, adding a new color would require creating three subclasses, one for each shape type. The further we go, the worse it becomes.

This problem occurs because we’re trying to extend the shape classes in two independent dimensions: by form and by color.
That’s a very common issue with class inheritance.
The Bridge pattern attempts to solve this problem by switching from inheritance to the object composition.
What this means is that we extract one of the dimensions into a separate class hierarchy, so that the original classes will reference an object of the new hierarchy, instead of having all of its state and behaviors within one class.

Following this approach, we can extract the color-related code into its own class with two subclasses: Red and Blue.
The Shape class then gets a reference field pointing to one of the color objects.
Now the shape can delegate any color-related work to the linked color object.
That reference will act as a bridge between the Shape and Color classes.
From now on, adding new colors won’t require changing the shape hierarchy, and vice versa.

Applicability
-------------
Use the Bridge pattern when you want to divide and organize a monolithic class that has several variants of some functionality.
Use the pattern when you need to extend a class in several orthogonal (independent) dimensions.
Use the Bridge if we need to be able to switch implementations at runtime.


========================
COMPOSITE DESIGN PATTERN
========================
Composite is a structural design pattern that lets us compose objects into tree structures and then work with these structures as if they were individual objects.
Using the Composite pattern makes sense only when the core model of the app can be represented as a tree.

For example, imagine that you have two types of objects: Products and Boxes.
A Box can contain several Products as well as a number of smaller Boxes.
These little Boxes can also hold some Products or even smaller Boxes, and so on.

Real World Analogy: Armies of most countries are structured as hierarchies.
An army consists of several divisions; a division is a set of brigades, and a brigade consists of platoons, which can be broken down into squads.
Finally, a squad is a small group of real soldiers. Orders are given at the top of the hierarchy and passed down onto each level until every soldier knows what needs to be done.

How to Implement ?
------------------
01. Make sure that the core model of the app can be represented as a tree structure.
	Try to break it down into simple elements and containers.
	Remember that containers must be able to contain both simple elements and other containers.
02. Declare the component interface with a list of methods that make sense for both simple and complex components.
03. Create a leaf class to represent simple elements. A program may have multiple different leaf classes.
04. Create a container class to represent complex elements.
	In this class, provide an array field for storing references to sub-elements.
	The array must be able to store both leaves and containers, so make sure it’s declared with the component interface type.
	While implementing the methods of the component interface, remember that a container is supposed to be delegating most of the work to sub-elements.
05. Finally, define the methods for adding and removal of child elements in the container.
06. Keep in mind that these operations can be declared in the component interface.
	This would violate the Interface Segregation Principle because the methods will be empty in the leaf class.
	However, the client will be able to treat all the elements equally, even when composing the tree.

Usage Examples
--------------
The Composite pattern is pretty common in Java code.
It’s often used to represent hierarchies of user interface components or the code that works with graphs.

Here are some composite examples from standard Java libraries:
	java.awt.Container#add(Component) (practically all over Swing components)
	javax.faces.component.UIComponent#getChildren() (practically all over JSF UI components)

The composite is easy to recognize by behavioral methods taking an instance of the same abstract/interface type into a tree structure.

Applicability
-------------
Use the Composite pattern when we have to implement a tree-like object structure.
Use the pattern when we want the client code to treat both simple and complex elements uniformly.


========================
DECORATER DESIGN PATTERN
========================
This lets us attach new behaviors to objects by placing these objects inside special wrapper objects that contain the behaviors.
It allows a user to add new functionality to an existing object without altering its structure.
This type of design pattern comes under structural pattern as this pattern acts as a wrapper to existing class.
This pattern creates a decorator class which wraps the original class and provides additional functionality keeping class methods signature intact.

Design of decorator pattern
---------------------------
Start with an interface which creates a blue print for the class which will have decorators. Then implement that interface with basic functionalities.
Till now we have got an interface and an implementation concrete class.
Create an abstract class that contains (aggregation relationship) an attribute type of the interface.
The constructor of this class assigns the interface type instance to that attribute. This class is the decorator base class. 
Now we can extend this class and create as many concrete decorator classes. The concrete decorator class will add its own methods.
After or Before executing its own method the concrete decorator will call the base instance’s method.
Key to this decorator design pattern is the binding of method and the base instance happens at runtime based on the object passed as parameter to the constructor.
Thus dynamically customizing the behavior of that specific instance alone.

How to Implement ?
------------------
01. Make sure the business domain can be represented as a primary component with multiple optional layers over it.
02. Figure out what methods are common to both the primary component and the optional layers.
	Create a component interface and declare those methods there.
03. Create a concrete component class and define the base behavior in it.
04. Create a base decorator class. It should have a field for storing a reference to a wrapped object.
	The field should be declared with the component interface type to allow linking to concrete components as well as decorators.
	The base decorator must delegate all work to the wrapped object.
04.	Make sure all classes implement the component interface.
05. Create concrete decorators by extending them from the base decorator.
06.	A concrete decorator must execute its behavior before or after the call to the parent method (which always delegates to the wrapped object).
07. The client code must be responsible for creating decorators and composing them in the way the client needs.

The Component declares the common interface for both wrappers and wrapped objects.
Concrete Component is a class of objects being wrapped. It defines the basic behavior, which can be altered by decorators.
The Base Decorator class has a field for referencing a wrapped object.
The field’s type should be declared as the component interface so it can contain both concrete components and decorators.
The base decorator delegates all operations to the wrapped object.
Concrete Decorators define extra behaviors that can be added to components dynamically.
Concrete decorators override methods of the base decorator and execute their behavior either before or after calling the parent method.
The Client can wrap components in multiple layers of decorators, as long as it works with all objects via the component interface.

Applicability
-------------
Use the Decorator pattern when we need to be able to assign extra behaviors to objects at runtime without breaking the code that uses these objects.
Use the pattern when it’s awkward or not possible to extend an object’s behavior using inheritance.


=====================
FACADE DESIGN PATTERN
=====================
It provides a unified interface to a set of interfaces in a subsystem.
It provides a simplified interface to a library, a framework, or any other complex set of classes.
It defines a higher-level interface that makes the subsystem easier to use.
The facade pattern is appropriate when we have a complex system that we want to expose to clients in a simplified way. Its purpose is to hide internal complexity behind a single interface that appears simple from the outside.

Facade also decouples the code that uses the system from the details of the subsystems, making it easier to modify the system later.
In Java programming, we must have connected to a database to fetch some data.
We simply call the method dataSource.getConnection() to get the connection but internally a lot of things happen such as loading the driver, creating connection or fetching connection from pool, update stats and then return the connection reference to caller method.

How to Implement ?
------------------
01. Check whether it’s possible to provide a simpler interface than what an existing subsystem already provides.
	We’re on the right track if this interface makes the client code independent from many of the subsystem’s classes.
02. Declare and implement this interface in a new facade class.
	The facade should redirect the calls from the client code to appropriate objects of the subsystem.
	The facade should be responsible for initializing the subsystem and managing its further life cycle unless the client code already does this.
03. To get the full benefit from the pattern, make all the client code communicate with the subsystem only via the facade.
	Now the client code is protected from any changes in the subsystem code.
	For example, when a subsystem gets upgraded to a new version, we will only need to modify the code in the facade.
04. If the facade becomes too big, consider extracting part of its behavior to a new, refined facade class.

Facade defines a new interface for existing objects, whereas Adapter tries to make the existing interface usable.
Adapter usually wraps just one object, while Facade works with an entire subsystem of objects.

Facade design pattern is more like a helper for client applications, it doesn’t hide subsystem interfaces from the client.
Whether to use Facade or not is completely dependent on client code.

It can be applied at any point of development, usually when the number of interfaces grow and system gets complex.
Subsystem interfaces are not aware of Facade and they shouldn’t have any reference of the Facade interface.
It should be applied for similar kind of interfaces, its purpose is to provide a single interface rather than multiple interfaces that does the similar kind of jobs.

Applicability
-------------
Use the Facade pattern when we need to have a limited but straightforward interface to a complex subsystem.
Use the Facade when we want to structure a subsystem into layers.


========================
FLYWEIGHT DESIGN PATTERN
========================
Flyweight lets us fit more objects into the available amount of RAM by sharing common parts of state between multiple objects instead of keeping all of the data in each object.

The constant data of an object is usually called the intrinsic state.
It lives within the object; other objects can only read it, not change it.
The rest of the object’s state, often altered “from the outside” by other objects, is called the extrinsic state.

The Flyweight pattern suggests to stop storing the extrinsic state inside the object.
Instead, we should pass this state to specific methods which rely on it.
Only the intrinsic state stays within the object, letting us reuse it in different contexts.
As a result, we’d need fewer of these objects since they only differ in the intrinsic state, which has much fewer variations than the extrinsic.

An object that only stores the intrinsic state is called a flyweight.

Since the same flyweight object can be used in different contexts, we have to make sure that its state can’t be modified.
A flyweight should initialize its state just once, via constructor parameters.
It shouldn’t expose any setters or public fields to other objects.

The Flyweight pattern is merely an optimization.
Before applying it, make sure the program does have the RAM consumption problem related to having a massive number of similar objects in memory at the same time.
Make sure that this problem can’t be solved in any other meaningful way.

The Flyweight class contains the portion of the original object’s state that can be shared between multiple objects.
The same flyweight object can be used in many different contexts.
The state stored inside a flyweight is called “intrinsic.”
The state passed to the flyweight’s methods is called “extrinsic.”

The Context class contains the extrinsic state, unique across all original objects.
When a context is paired with one of the flyweight objects, it represents the full state of the original object.

Usually, the behavior of the original object remains in the flyweight class.
In this case, whoever calls a flyweight’s method must also pass appropriate bits of the extrinsic state into the method’s parameters.
On the other hand, the behavior can be moved to the context class, which would use the linked flyweight merely as a data object.

The Client calculates or stores the extrinsic state of flyweights.
From the client’s perspective, a flyweight is a template object which can be configured at runtime by passing some contextual data into parameters of its methods.

The Flyweight Factory manages a pool of existing flyweights.
With the factory, clients don’t create flyweights directly.
Instead, they call the factory, passing it bits of the intrinsic state of the desired flyweight.
The factory looks over previously created flyweights and either returns an existing one that matches search criteria or creates a new one if nothing is found.

The Flyweight pattern has a single purpose: minimizing memory intake.
If our program doesn’t struggle with a shortage of RAM, then we might just ignore this pattern for a while.


====================
PROXY DESIGN PATTERN
====================
Proxy is a structural design pattern that provides an object that acts as a substitute for a real service object used by a client.
A proxy receives client requests, does some work (access control, caching, etc.) and then passes the request to a service object.

A real world example can be a cheque or credit card is a proxy for what is in our bank account.
It can be used in place of cash, and provides a means of accessing that cash when required.
And that’s exactly what the Proxy pattern does – “Controls and manage access to the object they are protecting“.

Proxy pattern is used when we need to create a wrapper to cover the main object’s complexity from the client.

Remote Proxy
------------
They are responsible for representing the object located remotely.
Talking to the real object might involve marshalling and unmarshalling of data and talking to the remote object.
All that logic is encapsulated in these proxies and the client application need not worry about them.

Virtual Proxy
-------------
These proxies will provide some default and instant results if the real object is supposed to take some time to produce results.
These proxies initiate the operation on real objects and provide a default result to the application.
Once the real object is done, these proxies push the actual data to the client where it has provided dummy data earlier.

Protection Proxy
----------------
If an application does not have access to some resource then such proxies will talk to the objects in applications that have access to that resource and then get the result back.

Smart Proxy
-----------
A smart proxy provides additional layer of security by interposing specific actions when the object is accessed.
An example can be to check if the real object is locked before it is accessed to ensure that no other object can change it.

One of the advantages of Proxy pattern is security.
This pattern avoids duplication of objects which might be huge size and memory intensive. This in turn increases the performance of the application.
The remote proxy also ensures about security by installing the local code proxy in the client machine and then accessing the server with help of the remote code.

Proxies delegate all of the real work to some other object.
Each proxy method should, in the end, refer to a service object unless the proxy is a subclass of a service.

The Service Interface declares the interface of the Service.
The proxy must follow this interface to be able to disguise itself as a service object.

The Service is a class that provides some useful business logic.

The Proxy class has a reference field that points to a service object.
After the proxy finishes its processing (lazy initialization, logging, access control, caching, etc.), it passes the request to the service object.

The Client should work with both services and proxies via the same interface.
This way we can pass a proxy into any code that expects a service object.

